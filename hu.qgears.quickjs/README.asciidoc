= QuickJS core

This project is dependency of both server side and client side implementation of QuickJS


== QuickJS threading

The new QuickJS is designed to be executable on the client side using cross compilation technique.
(Java to JS using the bytecoder project by Mirko Sertic)

To achieve this goal:

 * GUI implementation code must not depend on Jetty code (or any other server side http tech).
 * GUI implementation must be single threaded with a callback design such as JavaScript
 ** Promise design is used
 * Server objects (which are local objects in case of server side execution of the code) have to be accessed through Promise objects

== Server autowrapper

Based on an interface (Java interface) generate a wrapper that makes it possible to call each methods as a promise.

The implementation on the client is remoting.
The implementation on the server is direct execution on the http thread. (with possible added latency to test its effect)

== IQCallContext as first parameter on the interface

When the first parameter is instance of IQCallContext then it will not be visible on the client side.

The server receives this parameter but the client does not send it. This parameter is stored with the connection (session).


== Listeners to server side objects - IRemotingCallback

IRemotingCallback interface marks that the parameter is a callback.

Event listeners are auto-wrapped so that the callback is executed on the GUI thread.

When adding a listener is called in the page initialization code then it is executed at once before returning.

Event listeners only work while the page has an active connection (WebSocket) to the server.

WebSocket connection logic of the application:

 * Application tracks the focused state of the web page (window.onfocus, window.onblur)
 ** On onblur the connection is disposed (on mobile this happens automatically!)
 ** On onfocus the connection is reopened
 * When a listener is added that is automatically stored on the client side and it is automatically re-added (sending the same data with the subscription) whenever the connection is reopened


== Callbacks

May the server call into GUI code? No. The server can only send events but can not get a return value or
an exception.

== Server connection

 * During initialization the connection is always present
 * client starts a connection to the server:
 ** Single query
 ** Short live with timeout
 ** Always

== Page life cycle

 * Page is created when the GET query arrives from the Web server.
 * Page is in initial query state
 ** Initial page response is created. This is executed both on server and client.
 ** server connection is always active in this phase
 ** Promise API is used to access server. But in real promise calls are blocking calls into the Java code.
 ** The page signals the initial page is ready when it is ready
 ** After this state the initial page output is not accessible.
 ** On client side the same API queries are replayed. The data is serialized into the client so it is possible.
 * Page is in running state
 ** the code can run either server side or client side

 ** the page accesses the server through promise API


== Single Page Application (SPA) and QPageContainer/QPage

SPA is not mandatory.

QPageContainer (to be named) is the container object that is created when the user enters an address and the GET query arrives.

QPage is content of QPageContainer and it is the part that is replaced when the user navigates to an other SPA page.

A difference between generic containers and QPageContainer:

 * only a single QPage is allowed to exist at a time.
 * The child of the QPageContainer must be a QPage.



